package xyz.mlserver.mcutil.advancement;

import xyz.mlserver.mcutil.advancement.shared.*;
import xyz.mlserver.mcutil.advancement.trigger.*;
import xyz.mlserver.mcutil.advancement.util.Validator;
import net.md_5.bungee.api.chat.TextComponent;
import org.apache.commons.lang.Validate;
import org.bukkit.Bukkit;
import org.bukkit.NamespacedKey;
import org.bukkit.block.Biome;
import org.bukkit.plugin.Plugin;
import org.jetbrains.annotations.Nullable;

import java.util.Arrays;
import java.util.function.Function;

/**
 * A class containing methods which should drastically speed up the creation of the common advancements. Also offers auto-activation functionalities.
 */
@SuppressWarnings({"unused", "SameParameterValue"})
public class AdvancementFactory {
	private final Plugin plugin;
	private final boolean autoActivate;
	private final boolean autoReload;
	
	/**
	 * @param plugin the advancements' ids will be created in this plugin's namespace
	 * @param autoActivate whether the advancement should be automatically activated directly after creation
	 * @param autoReload whether {@link Bukkit#reloadData()} should be called immediately after an advancement has been created.
	 * {@code autoActivate} mustn't be false if this is true
	 */
	public AdvancementFactory(Plugin plugin, boolean autoActivate, boolean autoReload) {
		Validate.isTrue(!(!autoActivate && autoReload), "Auto reload doesn't't work without auto activation.");
		this.plugin = plugin;
		this.autoActivate = autoActivate;
		this.autoReload = autoReload;
	}
	
	
	
	/**
	 * Creates a new {@link Advancement} with the specified contents and possibly activates it
	 * (and possibly calls {@link Bukkit#reloadData()}) depending on the parameters passed in the constructor.
	 *
	 * @param id the id of the advancement, without namespace
	 * @param parent the parent advancement, can be null. {@link #getRoot(String, String, String, MaterialId, int, String)} may be more suitable for root advancements
	 * @param title the title of the advancement
	 * @param description the description of the advancement
	 * @param icon the icon of the advancement
	 * @param data the icon's data value
	 * @param triggerId the id of the trigger
	 * @param trigger the trigger of the advancement
	 * @return the created advancement
	 */
	public Advancement getSimple(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, String triggerId, Trigger trigger) {
		validate(id, title, description, icon);
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon).setData(data),
				new TextComponent(title), new TextComponent(description))
				.addTrigger(triggerId, trigger);
		finalize(advancement, parent);
		return advancement;
	}
	
	/**
	 * Similar to {@link #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)}, but this method adds multiple triggers,
	 * all of which must be completed in order to complete the advancement. The triggers are generated by iterating over the {@code contents} array
	 * and calling the {@code triggerCreator} function.
	 */
	public <T> Advancement getAll(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data,
	                              T[] contents, Function<T, Trigger> triggerCreator) {
		validate(id, title, description, icon);
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon).setData(data),
				new TextComponent(title), new TextComponent(description));
		for (int i = 0; i < contents.length; i++) {
			advancement.addTrigger(String.valueOf(i), triggerCreator.apply(contents[i]));
		}
		finalize(advancement, parent);
		return advancement;
	}
	
	/**
	 * Similar to {@link #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)}, but this method adds multiple triggers,
	 * only one of which must be completed in order to complete the advancement. The triggers are generated by iterating over the {@code contents} array
	 * and calling the {@code triggerCreator} function.
	 */
	public <T> Advancement getAny(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data,
	                              T[] contents, Function<T, Trigger> triggerCreator) {
		validate(id, title, description, icon);
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon).setData(data),
				new TextComponent(title), new TextComponent(description));
		String[] requirements = new String[contents.length];
		for (int i = 0; i < contents.length; i++) {
			String index = String.valueOf(i);
			requirements[i] = index;
			advancement.addTrigger(index, triggerCreator.apply(contents[i]));
		}
		advancement.addRequirement(requirements);
		finalize(advancement, parent);
		return advancement;
	}
	
	
	
	/**
	 * Similar to {@link #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)}, but this method creates
	 * an advancement which is automatically unlocked and has the specified background.
	 */
	public Advancement getRoot(String id, String title, String description, MaterialId icon, int data, String background) {
		validate(id, title, description, icon);
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon).setData(data),
				new TextComponent(title), new TextComponent(description))
				.makeRoot(background, true);
		finalize(advancement, null);
		return advancement;
	}
	
	/**
	 * @see #getRoot(String, String, String, MaterialId, int, String)
	 */
	public Advancement getRoot(String id, String title, String description, MaterialId icon, String background) {
		return getRoot(id, title, description, icon, -1, background);
	}
	
	
	
	/**
	 * Similar to {@link #getRoot(String, String, String, MaterialId, int, String)}, but this method creates a child advancement (which is also automatically unlocked).
	 */
	public Advancement getEmpty(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data) {
		validate(id, title, description, icon);
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon).setData(data),
				new TextComponent(title), new TextComponent(description))
				.addTrigger("auto", new LocationTrigger())
				.setAnnounce(false)
				.setToast(false);
		finalize(advancement, parent);
		return advancement;
	}
	
	/**
	 * @see #getEmpty(String, Advancement, String, String, MaterialId, int)
	 */
	public Advancement getEmpty(String id, @Nullable Advancement parent, String title, String description, MaterialId icon) {
		return getEmpty(id, parent, title, description, icon, -1);
	}
	
	
	
	/**
	 * This method creates an advancement which has multiple impossible triggers with the specified trigger ids.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getImpossible(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, String... triggers) {
		validate(id, title, description, icon);
		Validate.notNull(triggers);
		Validate.isTrue(triggers.length > 0, "At least one trigger must be specified.");
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon).setData(data),
				new TextComponent(title), new TextComponent(description));
		for (String trigger : triggers) {
			advancement.addTrigger(trigger, new ImpossibleTrigger());
		}
		finalize(advancement, parent);
		return advancement;
	}
	
	/**
	 * @see #getImpossible(String, Advancement, String, String, MaterialId, int, String...)
	 */
	public Advancement getImpossible(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, String... triggers) {
		return getImpossible(id, parent, title, description, icon, -1, triggers);
	}
	
	/**
	 * Similar to {@link #getImpossible(String, Advancement, String, String, MaterialId, int, String...)}, but this method
	 * only adds a single trigger with the id "0".
	 */
	public Advancement getImpossible(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data) {
		return getImpossible(id, parent, title, description, icon, data, "0");
	}
	
	/**
	 * @see #getImpossible(String, Advancement, String, String, MaterialId, int)
	 */
	public Advancement getImpossible(String id, @Nullable Advancement parent, String title, String description, MaterialId icon) {
		return getImpossible(id, parent, title, description, icon, -1, "0");
	}
	
	/**
	 * Similar to {@link #getImpossible(String, Advancement, String, String, MaterialId, int, String...)}, but this method
	 * adds specified amount of triggers, with the ids starting with "0" and ending with the string value of {@code triggerCount - 1}
	 */
	public Advancement getCountedImpossible(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, int triggerCount) {
		validate(id, title, description, icon);
		Validate.isTrue(triggerCount > 0, "There must be at least one trigger.");
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon).setData(data),
				new TextComponent(title), new TextComponent(description));
		for (int i = 0; i < triggerCount; i++) {
			advancement.addTrigger(String.valueOf(i), new ImpossibleTrigger());
		}
		finalize(advancement, parent);
		return advancement;
	}
	
	/**
	 * @see #getCountedImpossible(String, Advancement, String, String, MaterialId, int, int)
	 */
	public Advancement getCountedImpossible(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int triggerCount) {
		return getCountedImpossible(id, parent, title, description, icon, -1, triggerCount);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player breeds two animals, so the child is of the specified {@link MobType}.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getBreed(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType child) {
		Validate.notNull(child);
		return getSimple(id, parent, title, description, icon, data, "breed", new BredAnimalsTrigger().setChild(new EntityObject().setType(child)));
	}
	
	/**
	 * @see #getBreed(String, Advancement, String, String, MaterialId, int, MobType)
	 */
	public Advancement getBreed(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType child) {
		return getBreed(id, parent, title, description, icon, -1, child);
	}
	
	/**
	 * @see #getBreed(String, Advancement, String, String, MaterialId, int, MobType)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getBreedAll(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType... children) {
		validate(children);
		return getAll(id, parent, title, description, icon, data, children, (child) -> new BredAnimalsTrigger().setChild(new EntityObject().setType(child)));
	}
	
	/**
	 * @see #getBreedAll(String, Advancement, String, String, MaterialId, int, MobType...)
	 */
	public Advancement getBreedAll(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType... children) {
		return getBreedAll(id, parent, title, description, icon, -1, children);
	}
	
	/**
	 * @see #getBreed(String, Advancement, String, String, MaterialId, int, MobType)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getBreedAny(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType... children) {
		validate(children);
		return getAny(id, parent, title, description, icon, data, children, (child) -> new BredAnimalsTrigger().setChild(new EntityObject().setType(child)));
	}
	
	/**
	 * @see #getBreedAny(String, Advancement, String, String, MaterialId, int, MobType...)
	 */
	public Advancement getBreedAny(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType... children) {
		return getBreedAny(id, parent, title, description, icon, -1, children);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player brews a {@link Potion} with the specified {@link Potion.Type}.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getBrew(String id, @Nullable Advancement parent, String title, String description, Potion potion, Potion.Type type) {
		Validate.notNull(potion);
		Validate.notNull(type);
		return getSimple(id, parent, title, description, type.getItem(), 0, "potion", new BrewedPotionTrigger().setPotion(potion));
	}
	
	/**
	 * @see #getBrew(String, Advancement, String, String, Potion, Potion.Type)
	 */
	public Advancement getBrew(String id, @Nullable Advancement parent, String title, String description, Potion potion) {
		return getBrew(id, parent, title, description, potion, Potion.Type.NORMAL);
	}
	
	/**
	 * @see #getBrew(String, Advancement, String, String, Potion, Potion.Type)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getBrewAll(String id, @Nullable Advancement parent, String title, String description, Potion.Type type, Potion... potions) {
		validate(potions);
		return getAll(id, parent, title, description, type.getItem(), 0, potions, (potion) -> new BrewedPotionTrigger().setPotion(potion));
	}
	
	/**
	 * @see #getBrewAll(String, Advancement, String, String, Potion.Type, Potion...)
	 */
	public Advancement getBrewAll(String id, @Nullable Advancement parent, String title, String description, Potion... potions) {
		return getBrewAll(id, parent, title, description, Potion.Type.NORMAL, potions);
	}
	
	/**
	 * @see #getBrew(String, Advancement, String, String, Potion, Potion.Type)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getBrewAny(String id, @Nullable Advancement parent, String title, String description, Potion.Type type, Potion... potions) {
		validate(potions);
		return getAny(id, parent, title, description, type.getItem(), 0, potions, (potion) -> new BrewedPotionTrigger().setPotion(potion));
	}
	
	/**
	 * @see #getBrewAny(String, Advancement, String, String, Potion.Type, Potion...)
	 */
	public Advancement getBrewAny(String id, @Nullable Advancement parent, String title, String description, Potion... potions) {
		return getBrewAny(id, parent, title, description, Potion.Type.NORMAL, potions);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player enters the specified {@link Dimension}.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getDimension(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, Dimension to) {
		Validate.notNull(to);
		return getSimple(id, parent, title, description, icon, data, "dimension", new ChangedDimensionTrigger().setTo(to));
	}
	
	/**
	 * @see #getDimension(String, Advancement, String, String, MaterialId, int, Dimension)
	 */
	public Advancement getDimension(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, Dimension to) {
		return getDimension(id, parent, title, description, icon, -1, to);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player construct a beacon which's level fits the optionally specified {@link RangeObject}.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getBeacon(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, @Nullable RangeObject level) {
		return getSimple(id, parent, title, description, icon, data, "beacon", new ConstructBeaconTrigger().setLevel(level));
	}
	
	/**
	 * @see #getBeacon(String, Advancement, String, String, MaterialId, int, RangeObject)
	 */
	public Advancement getBeacon(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, @Nullable RangeObject level) {
		return getBeacon(id, parent, title, description, icon, -1, level);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player consumes the specified item.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getConsume(String id, @Nullable Advancement parent, String title, String description, MaterialId item, int data) {
		return getSimple(id, parent, title, description, item, data, "consume", new ConsumeItemTrigger().setItem(new ItemObject().setItem(item).setData(data)));
	}
	
	/**
	 * @see #getConsume(String, Advancement, String, String, MaterialId, int)
	 */
	public Advancement getConsume(String id, @Nullable Advancement parent, String title, String description, MaterialId item) {
		return getConsume(id, parent, title, description, item, -1);
	}
	
	/**
	 * @see #getConsume(String, Advancement, String, String, MaterialId, int)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getConsumeAll(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAll(id, parent, title, description, items[0].getItem(), items[0].getData(), items, (item) -> new ConsumeItemTrigger().setItem(item));
	}
	
	/**
	 * @see #getConsumeAll(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getConsumeAll(String id, @Nullable Advancement parent, String title, String description, MaterialId... items) {
		return getConsumeAll(id, parent, title, description, toItemObjects(items));
	}
	
	/**
	 * @see #getConsume(String, Advancement, String, String, MaterialId, int)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getConsumeAny(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAny(id, parent, title, description, items[0].getItem(), items[0].getData(), items, (item) -> new ConsumeItemTrigger().setItem(item));
	}
	
	public Advancement getConsumeAny(String id, @Nullable Advancement parent, String title, String description, MaterialId... items) {
		return getConsumeAny(id, parent, title, description, toItemObjects(items));
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player's status effects change and they meet the specified {@link StatusEffectsObject}'s criteria.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getEffects(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, StatusEffectsObject effects) {
		Validate.notNull(effects);
		return getSimple(id, parent, title, description, icon, data, "effects", new EffectsChangedTrigger().setEffects(effects));
	}
	
	/**
	 * @see #getEffects(String, Advancement, String, String, MaterialId, int, StatusEffectsObject)
	 */
	public Advancement getEffects(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, StatusEffectsObject effects) {
		return getEffects(id, parent, title, description, icon, -1, effects);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player enchants the specified item.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getEnchantItem(String id, @Nullable Advancement parent, String title, String description, MaterialId item, int data) {
		return getSimple(id, parent, title, description, item, data, "enchant", new EnchantedItemTrigger().setItem(new ItemObject().setItem(item).setData(data)));
	}
	
	/**
	 * @see #getEnchantItem(String, Advancement, String, String, MaterialId, int)
	 */
	public Advancement getEnchantItem(String id, @Nullable Advancement parent, String title, String description, MaterialId item) {
		return getEnchantItem(id, parent, title, description, item, -1);
	}
	
	/**
	 * @see #getEnchantItem(String, Advancement, String, String, MaterialId, int)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getEnchantAllItems(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAll(id, parent, title, description, items[0].getItem(), items[0].getData(), items, (item) -> new EnchantedItemTrigger().setItem(item));
	}
	
	/**
	 * @see #getEnchantAllItems(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getEnchantAllItems(String id, @Nullable Advancement parent, String title, String description, MaterialId... items) {
		return getEnchantAllItems(id, parent, title, description, toItemObjects(items));
	}
	
	/**
	 * @see #getEnchantItem(String, Advancement, String, String, MaterialId, int)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getEnchantAnyItem(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAny(id, parent, title, description, items[0].getItem(), items[0].getData(), items, (item) -> new EnchantedItemTrigger().setItem(item));
	}
	
	/**
	 * @see #getEnchantAnyItem(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getEnchantAnyItem(String id, @Nullable Advancement parent, String title, String description, MaterialId... items) {
		return getEnchantAnyItem(id, parent, title, description, toItemObjects(items));
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player enters the specified block.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getEnterBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MaterialId block) {
		Validate.notNull(block);
		return getSimple(id, parent, title, description, icon, data, "enter", new EnterBlockTrigger().setBlock(new BlockObject(block)));
	}
	
	/**
	 * @see #getEnterBlock(String, Advancement, String, String, MaterialId, int, MaterialId)
	 */
	public Advancement getEnterBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MaterialId block) {
		return getEnterBlock(id, parent, title, description, icon, -1, block);
	}
	
	/**
	 * @see #getEnterBlock(String, Advancement, String, String, MaterialId, int, MaterialId)
	 */
	public Advancement getEnterBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId block) {
		return getEnterBlock(id, parent, title, description, block, -1, block);
	}
	
	/**
	 * @see #getEnterBlock(String, Advancement, String, String, MaterialId, int, MaterialId)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getEnterAllBlocks(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MaterialId... blocks) {
		validate(blocks);
		return getAll(id, parent, title, description, icon, data, blocks, (block) -> new EnterBlockTrigger().setBlock(new BlockObject(block)));
	}
	
	/**
	 * @see #getEnterAllBlocks(String, Advancement, String, String, MaterialId, int, MaterialId...)
	 */
	public Advancement getEnterAllBlocks(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MaterialId... blocks) {
		return getEnterAllBlocks(id, parent, title, description, icon, -1, blocks);
	}
	
	/**
	 * @see #getEnterAllBlocks(String, Advancement, String, String, MaterialId, int, MaterialId...)
	 */
	public Advancement getEnterAllBlocks(String id, @Nullable Advancement parent, String title, String description, MaterialId... blocks) {
		validate(blocks);
		return getEnterAllBlocks(id, parent, title, description, blocks[0], -1, blocks);
	}
	
	/**
	 * @see #getEnterBlock(String, Advancement, String, String, MaterialId, int, MaterialId)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getEnterAnyBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MaterialId... blocks) {
		validate(blocks);
		return getAny(id, parent, title, description, icon, data, blocks, (block) -> new EnterBlockTrigger().setBlock(new BlockObject(block)));
	}
	
	/**
	 * @see #getEnterAnyBlock(String, Advancement, String, String, MaterialId, int, MaterialId...)
	 */
	public Advancement getEnterAnyBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MaterialId... blocks) {
		return getEnterAnyBlock(id, parent, title, description, icon, -1, blocks);
	}
	
	/**
	 * @see #getEnterAnyBlock(String, Advancement, String, String, MaterialId, int, MaterialId...)
	 */
	public Advancement getEnterAnyBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId... blocks) {
		validate(blocks);
		return getEnterAnyBlock(id, parent, title, description, blocks[0], -1, blocks);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player gets the specified item in his inventory.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getItem(String id, @Nullable Advancement parent, String title, String description, MaterialId item, Integer minCount, int data) {
		return getSimple(id, parent, title, description, item, data, "item", new InventoryChangedTrigger()
				.addItem(new ItemObject().setItem(item).setCount(new RangeObject().setMin(minCount)).setData(data)));
	}
	
	/**
	 * @see #getItem(String, Advancement, String, String, MaterialId, Integer, int)
	 */
	public Advancement getItem(String id, @Nullable Advancement parent, String title, String description, MaterialId item, int data) {
		return getItem(id, parent, title, description, item, null, data);
	}
	
	/**
	 * @see #getItem(String, Advancement, String, String, MaterialId, Integer, int)
	 */
	public Advancement getItem(String id, @Nullable Advancement parent, String title, String description, MaterialId item) {
		return getItem(id, parent, title, description, item, null, -1);
	}
	
	/**
	 * @see #getItem(String, Advancement, String, String, MaterialId, Integer, int)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getAllItems(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAll(id, parent, title, description, items[0].getItem(), items[0].getData(), items, (item) -> new InventoryChangedTrigger().addItem(item));
	}
	
	/**
	 * @see #getAllItems(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getAllItems(String id, @Nullable Advancement parent, String title, String description, MaterialId... items) {
		return getAllItems(id, parent, title, description, toItemObjects(items));
	}
	
	/**
	 * This method creates an advancement which is completed when the player gets all of the specified items simultaneously in his inventory.
	 * @see #getItem(String, Advancement, String, String, MaterialId, Integer, int)
	 */
	public Advancement getAllItemsOnce(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		validate(id, title, description, items[0].getItem());
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), items[0], new TextComponent(title), new TextComponent(description));
		InventoryChangedTrigger trigger = new InventoryChangedTrigger();
		for (ItemObject item : items) {
			Validate.notNull(item);
			trigger.addItem(item);
		}
		advancement.addTrigger("items", trigger);
		finalize(advancement, parent);
		return advancement;
	}
	
	/**
	 * @see #getAllItemsOnce(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getAllItemsOnce(String id, @Nullable Advancement parent, String title, String description, MaterialId... items) {
		return getAllItemsOnce(id, parent, title, description, toItemObjects(items));
	}
	
	/**
	 * @see #getItem(String, Advancement, String, String, MaterialId, Integer, int)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getAnyItem(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAny(id, parent, title, description, items[0].getItem(), items[0].getData(), items, (item) -> new InventoryChangedTrigger().addItem(item));
	}
	
	/**
	 * @see #getAnyItem(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getAnyItem(String id, @Nullable Advancement parent, String title, String description, MaterialId... items) {
		return getAnyItem(id, parent, title, description, toItemObjects(items));
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player visits the specified {@link Feature}.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getFeature(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, Feature feature) {
		Validate.notNull(feature);
		return getSimple(id, parent, title, description, icon, data, "feature", new LocationTrigger().setLocation(new LocationObject().setFeature(feature)));
	}
	
	/**
	 * @see #getFeature(String, Advancement, String, String, MaterialId, int, Feature)
	 */
	public Advancement getFeature(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, Feature feature) {
		return getFeature(id, parent, title, description, icon, -1, feature);
	}
	
	/**
	 * @see #getFeature(String, Advancement, String, String, MaterialId, int, Feature)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getAllFeatures(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, Feature... features) {
		validate(features);
		return getAll(id, parent, title, description, icon, data, features, (feature) -> new LocationTrigger().setLocation(new LocationObject().setFeature(feature)));
	}
	
	/**
	 * @see #getAllFeatures(String, Advancement, String, String, MaterialId, int, Feature...)
	 */
	public Advancement getAllFeatures(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, Feature... features) {
		return getAllFeatures(id, parent, title, description, icon, -1, features);
	}
	
	/**
	 * @see #getFeature(String, Advancement, String, String, MaterialId, int, Feature)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getAnyFeature(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, Feature... features) {
		validate(features);
		return getAny(id, parent, title, description, icon, data, features, (feature) -> new LocationTrigger().setLocation(new LocationObject().setFeature(feature)));
	}
	
	/**
	 * @see #getAnyFeature(String, Advancement, String, String, MaterialId, int, Feature...)
	 */
	public Advancement getAnyFeature(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, Feature... features) {
		return getAnyFeature(id, parent, title, description, icon, -1, features);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player visits the specified {@link Biome}.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getBiome(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, Biome biome) {
		Validate.notNull(biome);
		return getSimple(id, parent, title, description, icon, data, "biome", new LocationTrigger().setLocation(new LocationObject().setBiome(biome)));
	}
	
	/**
	 * @see #getBiome(String, Advancement, String, String, MaterialId, int, Biome)
	 */
	public Advancement getBiome(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, Biome biome) {
		return getBiome(id, parent, title, description, icon, -1, biome);
	}
	
	/**
	 * @see #getBiome(String, Advancement, String, String, MaterialId, int, Biome)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getAllBiomes(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, Biome... biomes) {
		validate(biomes);
		return getAll(id, parent, title, description, icon, data, biomes, (biome) -> new LocationTrigger().setLocation(new LocationObject().setBiome(biome)));
	}
	
	/**
	 * @see #getAllBiomes(String, Advancement, String, String, MaterialId, int, Biome...)
	 */
	public Advancement getAllBiomes(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, Biome... biomes) {
		return getAllBiomes(id, parent, title, description, icon, -1, biomes);
	}
	
	/**
	 * @see #getBiome(String, Advancement, String, String, MaterialId, int, Biome)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getAnyBiome(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, Biome... biomes) {
		validate(biomes);
		return getAny(id, parent, title, description, icon, data, biomes, (biome) -> new LocationTrigger().setLocation(new LocationObject().setBiome(biome)));
	}
	
	/**
	 * @see #getAnyBiome(String, Advancement, String, String, MaterialId, int, Biome...)
	 */
	public Advancement getAnyBiome(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, Biome... biomes) {
		return getAnyBiome(id, parent, title, description, icon, -1, biomes);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player placed the specified block.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getPlacedBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MaterialId block) {
		return getSimple(id, parent, title, description, icon, data, "place", new PlacedBlockTrigger().setBlock(new BlockObject(block)));
	}
	
	/**
	 * @see #getPlacedBlock(String, Advancement, String, String, MaterialId, int, MaterialId)
	 */
	public Advancement getPlacedBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MaterialId block) {
		return getPlacedBlock(id, parent, title, description, icon, -1, block);
	}
	
	/**
	 * @see #getPlacedBlock(String, Advancement, String, String, MaterialId, int, MaterialId)
	 */
	public Advancement getPlacedBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId block) {
		return getPlacedBlock(id, parent, title, description, block, -1, block);
	}
	
	/**
	 * @see #getPlacedBlock(String, Advancement, String, String, MaterialId, int, MaterialId)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getPlaceAllBlocks(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MaterialId... blocks) {
		validate(blocks);
		return getAll(id, parent, title, description, icon, data, blocks, (block) -> new PlacedBlockTrigger().setBlock(new BlockObject(block)));
	}
	
	/**
	 * @see #getPlaceAllBlocks(String, Advancement, String, String, MaterialId, int, MaterialId...)
	 */
	public Advancement getPlaceAllBlocks(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MaterialId... blocks) {
		return getPlaceAllBlocks(id, parent, title, description, icon, -1, blocks);
	}
	
	/**
	 * @see #getPlaceAllBlocks(String, Advancement, String, String, MaterialId, int, MaterialId...)
	 */
	public Advancement getPlaceAllBlocks(String id, @Nullable Advancement parent, String title, String description, MaterialId... blocks) {
		validate(blocks);
		return getPlaceAllBlocks(id, parent, title, description, blocks[0], -1, blocks);
	}
	
	/**
	 * @see #getPlacedBlock(String, Advancement, String, String, MaterialId, int, MaterialId)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getPlaceAnyBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MaterialId... blocks) {
		validate(blocks);
		return getAny(id, parent, title, description, icon, data, blocks, (block) -> new PlacedBlockTrigger().setBlock(new BlockObject(block)));
	}
	
	/**
	 * @see #getPlaceAnyBlock(String, Advancement, String, String, MaterialId, int, MaterialId...)
	 */
	public Advancement getPlaceAnyBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MaterialId... blocks) {
		return getPlaceAnyBlock(id, parent, title, description, icon, -1, blocks);
	}
	
	/**
	 * @see #getPlaceAnyBlock(String, Advancement, String, String, MaterialId, int, MaterialId...)
	 */
	public Advancement getPlaceAnyBlock(String id, @Nullable Advancement parent, String title, String description, MaterialId... blocks) {
		validate(blocks);
		return getPlaceAnyBlock(id, parent, title, description, blocks[0], -1, blocks);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player places (a block is created) the specifies item.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getPlaceItem(String id, @Nullable Advancement parent, String title, String description, MaterialId item, int data) {
		return getSimple(id, parent, title, description, item, data, "place", new PlacedBlockTrigger().setItem(new ItemObject().setItem(item).setData(data)));
	}
	
	/**
	 * @see #getPlaceItem(String, Advancement, String, String, MaterialId, int)
	 */
	public Advancement getPlaceItem(String id, @Nullable Advancement parent, String title, String description, MaterialId item) {
		return getPlaceItem(id, parent, title, description, item, -1);
	}
	
	/**
	 * @see #getPlaceItem(String, Advancement, String, String, MaterialId, int)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getPlaceAllItems(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAll(id, parent, title, description, items[0].getItem(), items[0].getData(), items, (item) -> new PlacedBlockTrigger().setItem(item));
	}
	
	/**
	 * @see #getPlaceAllItems(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getPlaceAllItems(String id, @Nullable Advancement parent, String title, String description, MaterialId... items) {
		return getPlaceAllItems(id, parent, title, description, toItemObjects(items));
	}
	
	/**
	 * @see #getPlaceItem(String, Advancement, String, String, MaterialId, int)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getPlaceAnyItem(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAny(id, parent, title, description, items[0].getItem(), items[0].getData(), items, (item) -> new PlacedBlockTrigger().setItem(item));
	}
	
	/**
	 * @see #getPlaceAnyItem(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getPlaceAnyItem(String id, @Nullable Advancement parent, String title, String description, MaterialId... items) {
		return getPlaceAnyItem(id, parent, title, description, toItemObjects(items));
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player kills the specified mob.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getKill(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType mob) {
		Validate.notNull(mob);
		return getSimple(id, parent, title, description, icon, data, "kill",
				new PlayerKilledEntityTrigger().setDeath(new DeathObject().setEntity(new EntityObject().setType(mob))));
	}
	
	/**
	 * @see #getKill(String, Advancement, String, String, MaterialId, int, MobType)
	 */
	public Advancement getKill(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType mob) {
		return getKill(id, parent, title, description, icon, -1, mob);
	}
	
	/**
	 * @see #getKill(String, Advancement, String, String, MaterialId, int, MobType)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getAllKills(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType... mobs) {
		validate(mobs);
		return getAll(id, parent, title, description, icon, data, mobs,
				(mob) -> new PlayerKilledEntityTrigger().setDeath(new DeathObject().setEntity(new EntityObject().setType(mob))));
	}
	
	/**
	 * @see #getAllKills(String, Advancement, String, String, MaterialId, int, MobType...)
	 */
	public Advancement getAllKills(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType... mobs) {
		return getAllKills(id, parent, title, description, icon, -1, mobs);
	}
	
	/**
	 * @see #getKill(String, Advancement, String, String, MaterialId, MobType)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getAnyKill(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType... mobs) {
		validate(mobs);
		return getAny(id, parent, title, description, icon, data, mobs,
				(mob) -> new PlayerKilledEntityTrigger().setDeath(new DeathObject().setEntity(new EntityObject().setType(mob))));
	}
	
	/**
	 * @see #getAnyKill(String, Advancement, String, String, MaterialId, int, MobType...)
	 */
	public Advancement getAnyKill(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType... mobs) {
		return getAnyKill(id, parent, title, description, icon, -1, mobs);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player summons the specified mob.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getSummon(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType mob) {
		Validate.notNull(mob);
		return getSimple(id, parent, title, description, icon, data, "summon", new SummonedEntityTrigger().setEntity(new EntityObject().setType(mob)));
	}
	
	/**
	 * @see #getSummon(String, Advancement, String, String, MaterialId, int, MobType)
	 */
	public Advancement getSummon(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType mob) {
		return getSummon(id, parent, title, description, icon, -1, mob);
	}
	
	/**
	 * @see #getSummon(String, Advancement, String, String, MaterialId, int, MobType)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getSummonAll(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType... mobs) {
		validate(mobs);
		return getAll(id, parent, title, description, icon, data, mobs, (mob) -> new SummonedEntityTrigger().setEntity(new EntityObject().setType(mob)));
	}
	
	/**
	 * @see #getSummonAll(String, Advancement, String, String, MaterialId, int, MobType...)
	 */
	public Advancement getSummonAll(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType... mobs) {
		return getSummonAll(id, parent, title, description, icon, -1, mobs);
	}
	
	/**
	 * @see #getSummon(String, Advancement, String, String, MaterialId, int, MobType)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getSummonAny(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType... mobs) {
		validate(mobs);
		return getAny(id, parent, title, description, icon, data, mobs, (mob) -> new SummonedEntityTrigger().setEntity(new EntityObject().setType(mob)));
	}
	
	/**
	 * @see #getSummonAny(String, Advancement, String, String, MaterialId, int, MobType...)
	 */
	public Advancement getSummonAny(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType... mobs) {
		return getSummonAll(id, parent, title, description, icon, -1, mobs);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player tames the specified mob.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getTame(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType mob) {
		Validate.notNull(mob);
		return getSimple(id, parent, title, description, icon, data, "tame", new TameAnimalTrigger().setEntity(new EntityObject().setType(mob)));
	}
	
	/**
	 * @see #getTame(String, Advancement, String, String, MaterialId, int, MobType)
	 */
	public Advancement getTame(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType mob) {
		return getTame(id, parent, title, description, icon, -1, mob);
	}
	
	/**
	 * @see #getTame(String, Advancement, String, String, MaterialId, int, MobType)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getTameAll(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType... mobs) {
		validate(mobs);
		return getAll(id, parent, title, description, icon, data, mobs, (mob) -> new TameAnimalTrigger().setEntity(new EntityObject().setType(mob)));
	}
	
	/**
	 * @see #getTameAll(String, Advancement, String, String, MaterialId, int, MobType...)
	 */
	public Advancement getTameAll(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType... mobs) {
		return getTameAll(id, parent, title, description, icon, -1, mobs);
	}
	
	/**
	 * @see #getTame(String, Advancement, String, String, MaterialId, int, MobType)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getTameAny(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, int data, MobType... mobs) {
		validate(mobs);
		return getAny(id, parent, title, description, icon, data, mobs, (mob) -> new TameAnimalTrigger().setEntity(new EntityObject().setType(mob)));
	}
	
	/**
	 * @see #getTameAny(String, Advancement, String, String, MaterialId, int, MobType...)
	 */
	public Advancement getTameAny(String id, @Nullable Advancement parent, String title, String description, MaterialId icon, MobType... mobs) {
		return getTameAny(id, parent, title, description, icon, -1, mobs);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player trades for the specified item.
	 * @see #getSimple(String, Advancement, String, String, MaterialId, int, String, Trigger)
	 */
	public Advancement getTradeItem(String id, @Nullable Advancement parent, String title, String description, MaterialId item, int data) {
		return getSimple(id, parent, title, description, item, data, "trade", new VillagerTradeTrigger().setItem(new ItemObject().setItem(item).setData(data)));
	}
	
	/**
	 * @see #getTradeItem(String, Advancement, String, String, MaterialId, int)
	 */
	public Advancement getTradeItem(String id, @Nullable Advancement parent, String title, String description, MaterialId item) {
		return getTradeItem(id, parent, title, description, item, -1);
	}
	
	/**
	 * @see #getTradeItem(String, Advancement, String, String, MaterialId, int)
	 * @see #getAll(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getTradeAllItems(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAll(id, parent, title, description, items[0].getItem(), items[0].getData(), items, (item) -> new VillagerTradeTrigger().setItem(item));
	}
	
	/**
	 * @see #getTradeAllItems(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getTradeAllItems(String id, @Nullable Advancement parent, String title, String description, MaterialId... items) {
		return getTradeAllItems(id, parent, title, description, toItemObjects(items));
	}
	
	/**
	 * @see #getTradeItem(String, Advancement, String, String, MaterialId, int)
	 * @see #getAny(String, Advancement, String, String, MaterialId, int, Object[], Function)
	 */
	public Advancement getTradeAnyItem(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAny(id, parent, title, description, items[0].getItem(), items[0].getData(), items, (item) -> new VillagerTradeTrigger().setItem(item));
	}
	
	/**
	 * @see #getTradeAnyItem(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getTradeAnyItem(String id, @Nullable Advancement parent, String title, String description, MaterialId... items) {
		return getTradeAnyItem(id, parent, title, description, toItemObjects(items));
	}
	
	
	
	private static void validate(String id, String title, String description, MaterialId icon) {
		Validator.noNamespace(id);
		Validate.notNull(title);
		Validate.notNull(description);
		Validate.notNull(icon);
	}
	
	private static void validate(Object[] array) {
		Validate.notNull(array);
		Validate.isTrue(array.length > 0, "You must specify at least one element.");
	}
	
	private static ItemObject[] toItemObjects(MaterialId[] materials) {
		validate(materials);
		return Arrays.stream(materials).map((material) -> new ItemObject().setItem(material)).toArray(ItemObject[]::new);
	}
	
	private void finalize(Advancement advancement, @Nullable Advancement parent) {
		if (parent != null) {
			advancement.makeChild(parent.getId());
		}
		if (autoActivate) {
			advancement.activate(autoReload);
		}
	}
}
